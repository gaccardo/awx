#!/usr/bin/env python3

import os
import sys
import tempfile
import shutil

import configparser


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def validate(config):
    status_ok = True
    for section in config.sections():
        if not config.has_option(section, 'name'):
            print(f"* {section} doesn't have a name")
            status_ok = False

    return status_ok


def list(config):
    for section in config.sections():
        if section == "default":
            name = config.get(section, "name")
            print(f"{bcolors.BOLD}{bcolors.UNDERLINE}{name}{bcolors.ENDC}")
        else:
            print(f"{section}")


def exists(config, arg):
    return arg in config.sections()


def change(config, arg):
    with open(f'{home}/.aws/credentials', "r") as original:
        original_content = original.read()

    get_default_name = config.get("default", "name")
    new_content = original_content.replace(
        "[default]", f"[{get_default_name}]")
    new_content = new_content.replace(f"[{arg}]", "[default]")

    tmp_file = tempfile.mkstemp()
    with open(tmp_file[1], "w") as tmp_file_fd:
        tmp_file_fd.write(new_content)

    shutil.copyfile(tmp_file[1], f'{home}/.aws/credentials')
    os.remove(tmp_file[1])


if __name__ == "__main__":
    home = os.environ.get("HOME")
    config = configparser.ConfigParser()
    config.read(f'{home}/.aws/credentials')
    if not validate(config):
        sys.exit(1)

    if len(sys.argv) == 1:
        list(config)
    if len(sys.argv) == 2:
        if exists(config, sys.argv[1]):
            change(config, sys.argv[1])
        else:
            print(f"the context {sys.argv[1]} is invalid")
            sys.exit(1)
